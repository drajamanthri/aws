AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.11

  Sample SAM Template for test-sqs

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
  Api:
    TracingEnabled: true
Resources:
  TestSqsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      #if function name is not given, auto generated function name has the following format
      #stackName-ResourceName-randomCode
      FunctionName: TestSqs-fn
      PackageType: Image
      Architectures:
      - x86_64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TestSqsQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./fn
      DockerTag: python3.11-v1

  TestSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      #if the queue name is not set, the auto generated queue name has the following format
      #stackName-queueResourceName-randomCode
      QueueName: TestSqs-q
      #visibility timeout = (function timeout * 6) + batch window
      #if batch window = 0 and function timeout = 3 s
      #visibility timeout = 3 * 6 = 18s
      #The batch window is set when creating a lambda trigger.
      VisibilityTimeout: 18
      MessageRetentionPeriod: 60 #in seconds

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldApi:
  #   Description: API Gateway endpoint URL for Prod stage for Hello World function
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  TestSqsFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt TestSqsFunction.Arn
  TestSqsFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt TestSqsFunctionRole.Arn
